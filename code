// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

contract SimpleDAO {
    struct Proposal {
        string description;
        uint256 votesFor;
        uint256 votesAgainst;
        bool executed;
    }

    Proposal[] public proposals;
    mapping(address => bool) public members;

    constructor(address[] memory _members) {
        for (uint i = 0; i < _members.length; i++) {
            members[_members[i]] = true;
        }
    }

    function createProposal(string memory desc) public {
        require(members[msg.sender], "not member");
        proposals.push(Proposal(desc, 0, 0, false));
    }

    function vote(uint256 id, bool support) public {
        require(members[msg.sender], "not member");
        Proposal storage p = proposals[id];
        require(!p.executed, "already executed");

        if (support) p.votesFor++;
        else p.votesAgainst++;
    }
}
